# clinic/management/commands/runbot.py

from django.core.management.base import BaseCommand
from django.conf import settings
from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext
)
from telegram.error import TimedOut
from django.utils import timezone
import datetime

from clinic.models import (
    Service, Doctor, Appointment,
    TelegramProfile, Patient
)

# —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
ASK_PHONE, ASK_FIRST, ASK_LAST, ASK_REG_PASS = range(4)
ASK_LOGIN_PHONE, ASK_LOGIN_PASS = 4, 5
ASK_DOCTOR, ASK_SERVICE = 6, 7
ASK_DATE, ASK_TIME = 8, 9
ASK_CANCEL = 10  # ‚Üê –Ω–æ–≤–∞—è —Å—Ç–∞–¥–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã

class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏"

    def handle(self, *args, **options):
        updater = Updater(
            settings.TELEGRAM_BOT_TOKEN,
            use_context=True,
            request_kwargs={'read_timeout':20,'connect_timeout':10}
        )
        dp = updater.dispatcher

        login_menu = ReplyKeyboardMarkup(
            [['–í–æ–π—Ç–∏', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è']],
            resize_keyboard=True
        )
        auth_menu = ReplyKeyboardMarkup([
            ['–£—Å–ª—É–≥–∏', '–í—Ä–∞—á–∏', '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'],
            ['–ú–æ–∏ –∑–∞–ø–∏—Å–∏', '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'],
            ['–ü—Ä–æ—Ñ–∏–ª—å', '–ü–æ–º–æ—â—å']
        ], resize_keyboard=True)

        def start(update: Update, ctx: CallbackContext):
            update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=login_menu
            )

        # ‚Äî –õ–û–ì–ò–ù ‚Äî
        def login_start(update, ctx):
            update.message.reply_text(
                "üîë –í—Ö–æ–¥: –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
                    one_time_keyboard=True, resize_keyboard=True
                )
            )
            return ASK_LOGIN_PHONE

        def login_phone(update, ctx):
            if update.effective_message.contact:
                phone = update.effective_message.contact.phone_number
            else:
                phone = update.message.text.strip()
            ctx.user_data['login_phone'] = phone
            update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=ReplyKeyboardRemove())
            return ASK_LOGIN_PASS

        def login_pass(update, ctx):
            pw = update.message.text.strip()
            from django.contrib.auth import get_user_model
            User = get_user_model()
            try:
                user = User.objects.get(phone=ctx.user_data['login_phone'])
            except User.DoesNotExist:
                update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=login_menu)
                return ConversationHandler.END
            if not user.check_password(pw):
                update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.", reply_markup=login_menu)
                return ConversationHandler.END

            TelegramProfile.objects.update_or_create(
                chat_id=str(update.effective_chat.id),
                defaults={'user': user}
            )
            update.message.reply_text(f"‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user.first_name} {user.last_name}",
                                      reply_markup=auth_menu)
            return ConversationHandler.END

        # ‚Äî –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ‚Äî
        def register_start(update, ctx):
            update.message.reply_text(
                "üñä –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:",
                reply_markup=ReplyKeyboardMarkup(
                    [[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
                    one_time_keyboard=True, resize_keyboard=True
                )
            )
            return ASK_PHONE

        def register_phone(update, ctx):
            if update.effective_message.contact:
                phone = update.effective_message.contact.phone_number
            else:
                phone = update.message.text.strip()
            ctx.user_data['reg_phone'] = phone
            update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
            return ASK_FIRST

        def register_first(update, ctx):
            ctx.user_data['reg_first'] = update.message.text.strip()
            update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:")
            return ASK_LAST

        def register_last(update, ctx):
            ctx.user_data['reg_last'] = update.message.text.strip()
            update.message.reply_text("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:")
            return ASK_REG_PASS

        def register_pass(update, ctx):
            pw = update.message.text.strip()
            from django.contrib.auth import get_user_model
            User = get_user_model()
            user = User.objects.create_user(
                phone=ctx.user_data['reg_phone'],
                password=pw,
                first_name=ctx.user_data['reg_first'],
                last_name=ctx.user_data['reg_last']
            )
            Patient.objects.create(user=user)
            TelegramProfile.objects.create(chat_id=str(update.effective_chat.id), user=user)
            update.message.reply_text("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=auth_menu)
            return ConversationHandler.END

        # ‚Äî –û–ë–©–ò–ï –ö–û–ú–ê–ù–î–´ ‚Äî
        def services_cmd(update, ctx):
            items = Service.objects.all()
            text = "\n".join(f"‚Äì {s.name} ({s.price}‚Ç∏)" for s in items)
            update.message.reply_text("üìã –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n" + text, reply_markup=auth_menu)

        def doctors_cmd(update, ctx):
            docs = Doctor.objects.select_related('user').all()
            lines = [f"{d.user.first_name} {d.user.patronymic} ‚Äî {d.specialization}" for d in docs]
            update.message.reply_text("üë©‚Äç‚öïÔ∏è –ù–∞—à–∏ –≤—Ä–∞—á–∏:\n" + "\n".join(lines), reply_markup=auth_menu)

        # ‚Äî –ó–ê–ü–ò–°–¨ (flow) ‚Äî
        def book_start(update, ctx):
            try:
                tp = TelegramProfile.objects.get(chat_id=str(update.effective_chat.id))
            except TelegramProfile.DoesNotExist:
                update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=login_menu)
                return ConversationHandler.END

            ctx.user_data['tp'] = tp
            docs = Doctor.objects.select_related('user').all()
            doctor_map = {}
            kb = []
            for d in docs:
                name = f"{d.user.first_name} {d.user.patronymic}"
                doctor_map[name] = d.pk
                kb.append([name])
            ctx.user_data['doctor_map'] = doctor_map
            update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))
            return ASK_DOCTOR

        def book_doctor(update, ctx):
            sel = update.message.text.strip()
            doctor_pk = ctx.user_data['doctor_map'].get(sel)
            if not doctor_pk:
                update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º –≤—Ä–∞—á–∞.")
                return ASK_DOCTOR
            ctx.user_data['doctor_pk'] = doctor_pk

            svcs = Service.objects.all()
            svc_map = {}
            kb = []
            for s in svcs:
                svc_map[s.name] = s.pk
                kb.append([s.name])
            ctx.user_data['svc_map'] = svc_map
            update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))
            return ASK_SERVICE

        def book_service(update, ctx):
            sel = update.message.text.strip()
            svc_pk = ctx.user_data['svc_map'].get(sel)
            if not svc_pk:
                update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É—Å–ª—É–≥–∏.")
                return ASK_SERVICE
            ctx.user_data['service_pk'] = svc_pk

            today = datetime.date.today()
            doctor_pk = ctx.user_data['doctor_pk']
            dates = []
            for i in range(7):
                d = today + datetime.timedelta(days=i)
                if d.weekday() == 6:
                    continue
                start, end = (9,17) if d.weekday()<5 else (9,13)
                if Appointment.objects.filter(doctor_id=doctor_pk, date_time__date=d).count() < (end-start):
                    dates.append(d)
            if not dates:
                update.message.reply_text("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é.", reply_markup=auth_menu)
                return ConversationHandler.END

            kb = [[d.strftime("%d.%m.%Y")] for d in dates]
            update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))
            return ASK_DATE

        def book_date(update, ctx):
            ds = update.message.text.strip()
            try:
                date = datetime.datetime.strptime(ds, "%d.%m.%Y").date()
            except ValueError:
                update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –¥–∞—Ç–æ–π.", reply_markup=auth_menu)
                return ASK_DATE
            ctx.user_data['date'] = ds
            wd = date.weekday()
            start, end = (9,17) if wd<5 else (9,13)

            busy = [
                timezone.localtime(a.date_time).hour
                for a in Appointment.objects.filter(
                    doctor_id=ctx.user_data['doctor_pk'],
                    date_time__date=date
                )
            ]
            slots = [f"{h:02d}:00" for h in range(start,end) if h not in busy]
            if not slots:
                update.message.reply_text("–í—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã.", reply_markup=auth_menu)
                return ASK_DATE

            kb = [[t] for t in slots]
            update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {ds}:",
                                      reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))
            return ASK_TIME

        def book_time(update, ctx):
            ts = update.message.text.strip()
            ds = ctx.user_data['date']
            try:
                dt_naive = datetime.datetime.strptime(f"{ds} {ts}", "%d.%m.%Y %H:%M")
            except ValueError:
                update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º.", reply_markup=auth_menu)
                return ASK_TIME

            dt = timezone.make_aware(dt_naive)
            Appointment.objects.create(
                patient=ctx.user_data['tp'].user.patient,
                doctor=Doctor.objects.get(pk=ctx.user_data['doctor_pk']),
                service=Service.objects.get(pk=ctx.user_data['service_pk']),
                date_time=dt
            )
            update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=auth_menu)
            return ConversationHandler.END

        # ‚Äî –ú–æ–∏ –∑–∞–ø–∏—Å–∏ ‚Äî
        def myappointments_cmd(update, ctx):
            try:
                tp = TelegramProfile.objects.get(chat_id=str(update.effective_chat.id))
            except TelegramProfile.DoesNotExist:
                return update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ.", reply_markup=login_menu)

            appts = Appointment.objects.filter(patient=tp.user.patient)
            if not appts:
                return update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=auth_menu)

            lines = [
                f"{a.pk}. {a.service.name} ‚Äî {timezone.localtime(a.date_time).strftime('%d.%m.%Y %H:%M')}"
                for a in appts
            ]
            update.message.reply_text(
                "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n" + "\n".join(lines) + 
                "\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å¬ª, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö.",
                reply_markup=auth_menu
            )

        # ‚Äî –û–¢–ú–ï–ù–ê –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π flow ‚Äî
        def cancel_start(update, ctx):
            # –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ ASK_CANCEL
            try:
                tp = TelegramProfile.objects.get(chat_id=str(update.effective_chat.id))
            except TelegramProfile.DoesNotExist:
                return update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ.", reply_markup=login_menu)

            appts = Appointment.objects.filter(patient=tp.user.patient)
            if not appts:
                return update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=auth_menu)

            lines = [
                f"{a.pk}. {a.service.name} —É Dr. {a.doctor.user.last_name} ‚Äî "
                f"{timezone.localtime(a.date_time).strftime('%d.%m.%Y %H:%M')}"
                for a in appts
            ]
            update.message.reply_text(
                "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n" + "\n".join(lines) +
                "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
                reply_markup=ReplyKeyboardRemove()
            )
            return ASK_CANCEL

        def cancel_confirm(update, ctx):
            text = update.message.text.strip()
            if not text.isdigit():
                update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É ‚Ññ –∑–∞–ø–∏—Å–∏.")
                return ASK_CANCEL
            pk = int(text)
            try:
                tp = TelegramProfile.objects.get(chat_id=str(update.effective_chat.id))
                appt = Appointment.objects.get(pk=pk, patient=tp.user.patient)
            except (TelegramProfile.DoesNotExist, Appointment.DoesNotExist):
                update.message.reply_text("–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ASK_CANCEL

            appt.delete()
            update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=auth_menu)
            return ConversationHandler.END

        def profile_cmd(update, ctx):
            tp = TelegramProfile.objects.get(chat_id=str(update.effective_chat.id))
            u = tp.user
            update.message.reply_text(
                f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {u.first_name}\n–§–∞–º–∏–ª–∏—è: {u.last_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {u.phone}",
                reply_markup=auth_menu
            )

        def help_cmd(update, ctx):
            update.message.reply_text(
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
                "–£—Å–ª—É–≥–∏ | –í—Ä–∞—á–∏ | –ó–∞–ø–∏—Å–∞—Ç—å—Å—è | –ú–æ–∏ –∑–∞–ø–∏—Å–∏ | –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å | –ü—Ä–æ—Ñ–∏–ª—å | –ü–æ–º–æ—â—å",
                reply_markup=auth_menu
            )

        # ConversationHandler-—ã
        conv_login = ConversationHandler(
            entry_points=[
                CommandHandler('login', login_start),
                MessageHandler(Filters.regex('^–í–æ–π—Ç–∏$'), login_start)
            ],
            states={
                ASK_LOGIN_PHONE: [MessageHandler(Filters.contact | (Filters.text & ~Filters.command), login_phone)],
                ASK_LOGIN_PASS:  [MessageHandler(Filters.text & ~Filters.command, login_pass)],
            },
            fallbacks=[]
        )
        dp.add_handler(conv_login)

        conv_register = ConversationHandler(
            entry_points=[
                CommandHandler('register', register_start),
                MessageHandler(Filters.regex('^–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è$'), register_start)
            ],
            states={
                ASK_PHONE:    [MessageHandler(Filters.contact | (Filters.text & ~Filters.command), register_phone)],
                ASK_FIRST:    [MessageHandler(Filters.text & ~Filters.command, register_first)],
                ASK_LAST:     [MessageHandler(Filters.text & ~Filters.command, register_last)],
                ASK_REG_PASS: [MessageHandler(Filters.text & ~Filters.command, register_pass)],
            },
            fallbacks=[]
        )
        dp.add_handler(conv_register)

        conv_book = ConversationHandler(
            entry_points=[
                MessageHandler(Filters.regex('^–ó–∞–ø–∏—Å–∞—Ç—å—Å—è$'), book_start),
                CommandHandler('book', book_start)
            ],
            states={
                ASK_DOCTOR:  [MessageHandler(Filters.text & ~Filters.command, book_doctor)],
                ASK_SERVICE: [MessageHandler(Filters.text & ~Filters.command, book_service)],
                ASK_DATE:    [MessageHandler(Filters.text & ~Filters.command, book_date)],
                ASK_TIME:    [MessageHandler(Filters.text & ~Filters.command, book_time)],
            },
            fallbacks=[]
        )
        dp.add_handler(conv_book)

        # –Ω–æ–≤—ã–π ConversationHandler –¥–ª—è –æ—Ç–º–µ–Ω—ã
        conv_cancel = ConversationHandler(
            entry_points=[MessageHandler(Filters.regex('^–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å$'), cancel_start)],
            states={ASK_CANCEL: [MessageHandler(Filters.text & ~Filters.command, cancel_confirm)]},
            fallbacks=[]
        )
        dp.add_handler(conv_cancel)

        # –ø—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        dp.add_handler(MessageHandler(Filters.regex('^–£—Å–ª—É–≥–∏$'), services_cmd))
        dp.add_handler(MessageHandler(Filters.regex('^–í—Ä–∞—á–∏$'), doctors_cmd))
        dp.add_handler(MessageHandler(Filters.regex('^–ú–æ–∏ –∑–∞–ø–∏—Å–∏$'), myappointments_cmd))
        dp.add_handler(MessageHandler(Filters.regex('^–ü—Ä–æ—Ñ–∏–ª—å$'), profile_cmd))
        dp.add_handler(MessageHandler(Filters.regex('^–ü–æ–º–æ—â—å$'), help_cmd))

        # –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("help", help_cmd))

        # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        import logging
        from telegram.error import NetworkError, TimedOut as PTBTimeout
        logger = logging.getLogger(__name__)
        dp.add_error_handler(lambda u,c: logger.warning(c.error) 
                             if isinstance(c.error,(NetworkError,PTBTimeout)) 
                             else logger.exception(c.error))

        self.stdout.write(self.style.SUCCESS("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, polling..."))
        updater.start_polling()
        updater.idle()
